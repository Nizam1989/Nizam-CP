import jsPDF from 'jspdf';
import { dataService } from '../lib/dataService';

export interface DossierData {
  jobId: string;
  jobNumber: string;
  productType: string;
  attachedComponents: Record<string, any>;
  coverPageData?: any;
  generatedBy: string;
  generatedAt: string;
}

export const generateDossierPDF = async (dossierData: DossierData): Promise<Blob> => {
  const pdf = new jsPDF();
  const pageWidth = pdf.internal.pageSize.getWidth();
  const pageHeight = pdf.internal.pageSize.getHeight();
  const margin = 20;
  let y = margin;

  // Helper function to add new page if needed
  const checkNewPage = (requiredSpace: number = 30) => {
    if (y + requiredSpace > pageHeight - margin) {
      pdf.addPage();
      y = margin;
      return true;
    }
    return false;
  };

  // Helper function to add page numbers
  const addPageNumbers = () => {
    const totalPages = pdf.getNumberOfPages();
    for (let i = 1; i <= totalPages; i++) {
      pdf.setPage(i);
      pdf.setFontSize(8);
      pdf.setFont('helvetica', 'normal');
      pdf.text(`Page ${i} of ${totalPages}`, pageWidth - margin - 30, pageHeight - 10);
    }
  };

  // 1. PRODUCT COVER PAGE
  pdf.setFontSize(24);
  pdf.setFont('helvetica', 'bold');
  pdf.text('QUALITY DOSSIER', pageWidth / 2, y, { align: 'center' });
  y += 20;

  pdf.setFontSize(18);
  const productTitle = dossierData.coverPageData?.projectName || `${dossierData.productType} Manufacturing`;
  pdf.text(productTitle, pageWidth / 2, y, { align: 'center' });
  y += 15;

  pdf.setFontSize(14);
  pdf.setFont('helvetica', 'normal');
  pdf.text(`Job Number: ${dossierData.jobNumber}`, pageWidth / 2, y, { align: 'center' });
  y += 40;

  // Customer Information
  if (dossierData.coverPageData?.customerName) {
    pdf.setFontSize(12);
    pdf.setFont('helvetica', 'bold');
    pdf.text('CUSTOMER INFORMATION', margin, y);
    y += 10;
    
    pdf.setFontSize(10);
    pdf.setFont('helvetica', 'normal');
    pdf.text(`Customer: ${dossierData.coverPageData.customerName}`, margin, y);
    y += 6;
    
    if (dossierData.coverPageData.poNumber) {
      pdf.text(`PO Number: ${dossierData.coverPageData.poNumber}`, margin, y);
      y += 6;
    }
    
    if (dossierData.coverPageData.customerContact) {
      pdf.text(`Contact: ${dossierData.coverPageData.customerContact}`, margin, y);
      y += 6;
    }
    
    if (dossierData.coverPageData.deliveryDate) {
      pdf.text(`Delivery Date: ${new Date(dossierData.coverPageData.deliveryDate).toLocaleDateString()}`, margin, y);
      y += 6;
    }
    y += 10;
  }

  // Job Details
  if (dossierData.coverPageData) {
    pdf.setFontSize(12);
    pdf.setFont('helvetica', 'bold');
    pdf.text('JOB DETAILS', margin, y);
    y += 10;
    
    pdf.setFontSize(10);
    pdf.setFont('helvetica', 'normal');
    
    if (dossierData.coverPageData.quantity) {
      pdf.text(`Quantity: ${dossierData.coverPageData.quantity}`, margin, y);
      y += 6;
    }
    
    if (dossierData.coverPageData.qualityStandard) {
      pdf.text(`Quality Standard: ${dossierData.coverPageData.qualityStandard}`, margin, y);
      y += 6;
    }
    
    if (dossierData.coverPageData.certificationLevel) {
      pdf.text(`Certification: ${dossierData.coverPageData.certificationLevel}`, margin, y);
      y += 6;
    }
    y += 10;
  }

  // Company logo placeholder
  pdf.setFillColor(240, 240, 240);
  pdf.rect(pageWidth / 2 - 40, y, 80, 35, 'F');
  pdf.setFontSize(10);
  const companyName = dossierData.coverPageData?.companyName || 'COMPLETION PRODUCTS PTE LTD';
  pdf.text(companyName.toUpperCase(), pageWidth / 2, y + 20, { align: 'center' });
  y += 55;

  pdf.setFontSize(12);
  pdf.text(`Generated on: ${new Date(dossierData.generatedAt).toLocaleDateString()}`, pageWidth / 2, y, { align: 'center' });
  pdf.text(`Generated by: ${dossierData.generatedBy}`, pageWidth / 2, y + 10, { align: 'center' });
  
  // Quality Manager signature section
  if (dossierData.coverPageData?.qcManager) {
    y += 30;
    pdf.setFontSize(10);
    pdf.text('Quality Manager:', margin, y);
    pdf.text(dossierData.coverPageData.qcManager, margin + 50, y);
    y += 15;
    pdf.text('Signature: ________________________', margin, y);
    pdf.text('Date: ________________________', margin + 120, y);
  }

  // 2. TABLE OF CONTENTS
  pdf.addPage();
  y = margin;

  pdf.setFontSize(18);
  pdf.setFont('helvetica', 'bold');
  pdf.text('TABLE OF CONTENTS', margin, y);
  y += 20;

  const tocItems = [
    'Product Cover Page',
    'Table of Contents',
    'Purchase Order',
    'Certificate of Conformance',
    'Final Assembly Drawings',
    'Component List',
    'Mill Certificate',
    'Torque Chart (if applicable)',
    'Slot Summary Measurement',
    'Liquid Dye Penetrant',
    'Final Inspection',
    'Assembly Traceability'
  ];

  pdf.setFontSize(12);
  pdf.setFont('helvetica', 'normal');
  tocItems.forEach((item, index) => {
    const pageNum = index + 1;
    pdf.text(`${index + 1}. ${item}`, margin, y);
    pdf.text(`${pageNum}`, pageWidth - margin - 20, y);
    
    // Draw dotted line
    const dots = '.'.repeat(Math.floor((pageWidth - margin * 2 - pdf.getTextWidth(`${index + 1}. ${item}`) - 20) / 3));
    pdf.text(dots, margin + pdf.getTextWidth(`${index + 1}. ${item}`) + 5, y);
    
    y += 8;
  });

  // 3. COMPONENT LIST (Auto-generated)
  pdf.addPage();
  y = margin;

  pdf.setFontSize(16);
  pdf.setFont('helvetica', 'bold');
  pdf.text('COMPONENT LIST', margin, y);
  y += 15;

  // Get job details
  const job = dataService.getJobById(dossierData.jobId);
  if (job) {
    pdf.setFontSize(10);
    pdf.setFont('helvetica', 'normal');
    
    const componentData = [
      ['Component', 'Specification', 'Quantity', 'Material'],
      ['Base Pipe', 'API 5CT Grade', '1', 'Carbon Steel'],
      ['Wire Wrap', 'Stainless Steel', '1', 'SS316L'],
      ['End Connections', 'Premium Thread', '2', 'Carbon Steel'],
      ['Centralizers', 'Bow Spring', '4', 'Spring Steel']
    ];

    // Draw table
    const colWidths = [60, 60, 30, 40];
    let tableY = y;

    componentData.forEach((row, rowIndex) => {
      let currentX = margin;
      
      if (rowIndex === 0) {
        pdf.setFont('helvetica', 'bold');
        pdf.setFillColor(200, 200, 200);
      } else {
        pdf.setFont('helvetica', 'normal');
        if (rowIndex % 2 === 0) {
          pdf.setFillColor(245, 245, 245);
        } else {
          pdf.setFillColor(255, 255, 255);
        }
      }

      // Draw row background
      pdf.rect(margin, tableY, colWidths.reduce((a, b) => a + b, 0), 8, 'F');

      row.forEach((cell, colIndex) => {
        pdf.rect(currentX, tableY, colWidths[colIndex], 8);
        pdf.text(cell, currentX + 2, tableY + 5);
        currentX += colWidths[colIndex];
      });

      tableY += 8;
    });

    y = tableY + 20;
  }

  // 4. SLOT SUMMARY MEASUREMENT (Auto-generated)
  checkNewPage(50);
  
  pdf.setFontSize(16);
  pdf.setFont('helvetica', 'bold');
  pdf.text('SLOT SUMMARY MEASUREMENT', margin, y);
  y += 15;

  pdf.setFontSize(10);
  pdf.setFont('helvetica', 'normal');
  pdf.text('Summary of slot measurements from manufacturing process:', margin, y);
  y += 10;

  // Sample measurement data
  const measurementData = [
    ['Slot Position', 'Width (mm)', 'Length (mm)', 'Depth (mm)', 'Status'],
    ['Position 1', '2.5', '50.0', '12.0', 'Pass'],
    ['Position 2', '2.4', '49.8', '12.1', 'Pass'],
    ['Position 3', '2.6', '50.2', '11.9', 'Pass'],
    ['Average', '2.5', '50.0', '12.0', 'Pass']
  ];

  const measurementColWidths = [40, 30, 30, 30, 25];
  let measurementY = y;

  measurementData.forEach((row, rowIndex) => {
    let currentX = margin;
    
    if (rowIndex === 0 || rowIndex === measurementData.length - 1) {
      pdf.setFont('helvetica', 'bold');
      pdf.setFillColor(200, 200, 200);
    } else {
      pdf.setFont('helvetica', 'normal');
      pdf.setFillColor(245, 245, 245);
    }

    pdf.rect(margin, measurementY, measurementColWidths.reduce((a, b) => a + b, 0), 8, 'F');

    row.forEach((cell, colIndex) => {
      pdf.rect(currentX, measurementY, measurementColWidths[colIndex], 8);
      pdf.text(cell, currentX + 2, measurementY + 5);
      currentX += measurementColWidths[colIndex];
    });

    measurementY += 8;
  });

  y = measurementY + 20;

  // 5. ATTACHED FORMS SECTIONS
  const attachedFormSections = [
    { id: 'purchase-order', title: 'PURCHASE ORDER', componentKey: 'purchase-order' },
    { id: 'certificate-conformance', title: 'CERTIFICATE OF CONFORMANCE', componentKey: 'certificate-conformance' },
    { id: 'assembly-drawings', title: 'FINAL ASSEMBLY DRAWINGS', componentKey: 'assembly-drawings' },
    { id: 'mill-certificate', title: 'MILL CERTIFICATE', componentKey: 'mill-certificate' },
    { id: 'torque-chart', title: 'TORQUE CHART', componentKey: 'torque-chart' },
    { id: 'liquid-dye', title: 'LIQUID DYE PENETRANT', componentKey: 'liquid-dye' },
    { id: 'final-inspection', title: 'FINAL INSPECTION', componentKey: 'final-inspection' },
    { id: 'assembly-traceability', title: 'ASSEMBLY TRACEABILITY', componentKey: 'assembly-traceability' }
  ];

  for (const section of attachedFormSections) {
    const componentData = dossierData.attachedComponents[section.componentKey];
    
    pdf.addPage();
    y = margin;

    pdf.setFontSize(16);
    pdf.setFont('helvetica', 'bold');
    pdf.text(section.title, margin, y);
    y += 15;

    if (componentData) {
      if (componentData.type === 'internal_forms' && componentData.forms) {
        // Render attached internal forms
        pdf.setFontSize(12);
        pdf.setFont('helvetica', 'normal');
        pdf.text(`${componentData.forms.length} form(s) attached:`, margin, y);
        y += 10;

        componentData.forms.forEach((form: any, index: number) => {
          checkNewPage(40);
          
          pdf.setFontSize(11);
          pdf.setFont('helvetica', 'bold');
          pdf.text(`${index + 1}. ${form.formType}`, margin, y);
          y += 8;

          pdf.setFontSize(9);
          pdf.setFont('helvetica', 'normal');
          pdf.text(`Job: ${form.jobNumber} | Step: ${form.stepName}`, margin + 10, y);
          y += 6;
          pdf.text(`Completed by: ${form.completedBy} on ${new Date(form.completedAt).toLocaleDateString()}`, margin + 10, y);
          y += 10;

          // Render form data if available
          if (form.data && Object.keys(form.data).length > 0) {
            pdf.text('Form Data:', margin + 10, y);
            y += 6;

            Object.entries(form.data).forEach(([key, value]: [string, any]) => {
              if (value && typeof value === 'string' && value.trim()) {
                checkNewPage(15);
                const displayKey = key.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
                pdf.text(`${displayKey}: ${value}`, margin + 15, y);
                y += 5;
              }
            });
          }

          y += 10;
        });
      } else if (componentData.type === 'external_fetch') {
        // Render fetched external documents
        pdf.setFontSize(12);
        pdf.setFont('helvetica', 'normal');
        pdf.text('Document fetched from SharePoint:', margin, y);
        y += 10;

        pdf.text(`File: ${componentData.fileName}`, margin + 10, y);
        y += 6;
        pdf.text(`Fetched on: ${new Date(componentData.fetchedAt).toLocaleDateString()}`, margin + 10, y);
        y += 6;
        pdf.text(`Source: ${componentData.source}`, margin + 10, y);
        y += 15;

        // Placeholder for actual document content
        pdf.setFillColor(240, 240, 240);
        pdf.rect(margin, y, pageWidth - 2 * margin, 50, 'F');
        pdf.text('Document content would be embedded here', pageWidth / 2, y + 25, { align: 'center' });
        y += 60;
      }
    } else {
      // No data attached
      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'italic');
      pdf.setTextColor(128, 128, 128);
      pdf.text('No document attached for this section.', margin, y);
      pdf.setTextColor(0, 0, 0);
      y += 20;
    }
  }

  // Add page numbers to all pages
  addPageNumbers();

  // Add footer to all pages
  const totalPages = pdf.getNumberOfPages();
  for (let i = 1; i <= totalPages; i++) {
    pdf.setPage(i);
    pdf.setFontSize(8);
    pdf.setFont('helvetica', 'normal');
    pdf.text('Completion Products Pte Ltd - Quality Dossier', margin, pageHeight - 10);
    pdf.text(`Generated: ${new Date(dossierData.generatedAt).toLocaleDateString()}`, pageWidth - margin - 60, pageHeight - 10);
  }

  return pdf.output('blob');
};